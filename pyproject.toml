[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "radar-shmu"
version = "1.0.0"
description = "Multi-source radar data processor for SHMU and DWD weather radar data"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
authors = [
    {name = "Radar Processing Team", email = "radar@example.com"}
]
keywords = ["weather", "radar", "meteorology", "shmu", "dwd", "data-processing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies (minimal set)
dependencies = [
    "numpy>=1.20.0",
    "h5py>=3.0.0",
    "matplotlib>=3.5.0",
    "requests>=2.25.0",
    "pillow>=8.0.0",
    "opencv-python>=4.5.0",
    "pytz>=2021.3",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]

# Performance dependencies (removed scipy as we're using cv2 now)
performance = [
    "numba>=0.50.0",
]

# All optional dependencies
all = ["radar-shmu[dev,performance]"]

[project.scripts]
radar-processor = "radar_shmu.cli:main"
radar-download = "radar_shmu.cli:download_command"
radar-merge = "radar_shmu.cli:merge_command"
radar-animate = "radar_shmu.cli:animate_command"

[project.urls]
Homepage = "https://github.com/radar-processing/radar-shmu"
Documentation = "https://radar-shmu.readthedocs.io/"
Repository = "https://github.com/radar-processing/radar-shmu"
Issues = "https://github.com/radar-processing/radar-shmu/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["radar_shmu*"]

[tool.setuptools.package-data]
"radar_shmu" = ["config/*.json", "colormaps/*.py"]

# Black code formatter
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

# isort import sorter
[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
known_first_party = ["radar_shmu"]
multi_line_output = 3
line_length = 88

# mypy type checker
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "PIL.*", 
    "h5py.*",
    "pytz.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

# Flake8 linter (via setup.cfg or .flake8, but documented here)
# Max line length should match black
# E203 and W503 are incompatible with black
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]